facet_wrap(vars(River)) +
scale_x_continuous(name = "Compressive Stregnth (MPA)") +
scale_y_continuous(name = "Count (bin width 6)")
# # histograms between ww levels of wear
# ggplot(data = ww_weathering, aes(comp_str)) +
#   geom_histogram(binwidth = 10) +
#   facet_wrap(vars(wear)) +
#   scale_x_continuous(name = "Compressive Stregnth (MPA)") +
#   scale_y_continuous(name = "Count (bin width 6)")
# stats
superior_str <- (schmidt_hammer %>%
filter(River == "temperance" | River == "cascade"))[,"comp_str"]
whitewater_str <- (schmidt_hammer %>%
filter(River == "whitewater"))[,"comp_str"]
# # comparison of variances
# var_log_sch <- var.test(superior_str, whitewater_str, ratio = 1, alternative = c("two.sided", "less", "greater"), conf.level = 0.95)
# print(var_log_sch)
# t-test (variances are so close to being different, I said they are)
t_log_sch <- t.test(superior_str, whitewater_str, alternative = c("two.sided", "less", "greater"), mu = 0, var.equal = FALSE, conf.level = 0.95)
print(t_log_sch)
# one-way anova
anova_wear <- aov(comp_str ~ wear, data = ww_weathering)
summary(anova_wear)
tukey.two.way<-TukeyHSD(anova_wear)
print(tukey.two.way)
ggplot(data = ww_weathering, aes(x = wear, y = comp_str, group = wear)) +
geom_point(cex = 1.5, pch = 1.0, position = position_jitter(w = 0.1, h = 0)) +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.2) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange')
tidy(t_log_sch)
install.pacakges(broom)
install.pacakges("broom")
install.packages("broom")
library(broom)
knitr::opts_chunk$set(echo = FALSE)
setwd("C:/Users/natha/OneDrive/Onedrive Documents/Graduate School/02_Coursework/01_ESCI 8701/Grad assignments")
library(knitr)
library(rmarkdown)
library(openxlsx)
library(dplyr)
library(tidyr)
library(ggplot2)
library(broom)
tidy(t_log_sch)
tidy(anova_wear)
kable(tidy(t_log_sch))
kable(tidy(tukey.two.way))
knitr::opts_chunk$set(echo = FALSE)
setwd("C:/Users/natha/OneDrive/Onedrive Documents/Graduate School/02_Coursework/01_ESCI 8701/Grad assignments")
library(knitr)
library(rmarkdown)
library(openxlsx)
library(dplyr)
library(tidyr)
library(ggplot2)
library(broom)
# t-test (variances are so close to being different, I said they are)
t_log_sch <- t.test(temperance_str, cascade_str, alternative = c("two.sided", "less", "greater"), mu = 0, var.equal = FALSE, conf.level = 0.95)
kabel(tidy(t_log_sch))
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
reticulate::repl_python()
quit
knitr::opts_chunk$set(include = FALSE, cache=TRUE, eval = FALSE)
reticulate::repl_python()
#Block 2: Importing Libraries and LandLab Components (Only needs to be run once)
###Libraries###
import numpy as np #Library for arrays
import matplotlib.pyplot as plt #Library for plotting
from landlab import RasterModelGrid #Component to make grids for landlab
from landlab.components import FlowAccumulator #Component to find drainage area
from landlab.components import FastscapeEroder #Component for fluvial processes
from landlab.components import LinearDiffuser #Component for hillslope processes
from landlab.components import DepressionFinderAndRouter #Component to route flow over depressions
print ('Libraries loaded sucessfully!')
quit
knitr::opts_chunk$set(include = FALSE, cache=TRUE, eval = FALSE)
library(reticulate)
use_python("/natha/local/bin/python")
Sys.which("python")
reticulate::repl_python()
#Block 1: Installing LandLab (Only needs to be run once)
# Installs LandLab
!pip install landlab
#Prints the following statement below
print ('Landlab installed!')
# Restarts runtime to ensure that Landlab can be found by Python
#exit()
#Block 2: Importing Libraries and LandLab Components (Only needs to be run once)
###Libraries###
import numpy as np #Library for arrays
import matplotlib.pyplot as plt #Library for plotting
from landlab import RasterModelGrid #Component to make grids for landlab
from landlab.components import FlowAccumulator #Component to find drainage area
from landlab.components import FastscapeEroder #Component for fluvial processes
from landlab.components import LinearDiffuser #Component for hillslope processes
from landlab.components import DepressionFinderAndRouter #Component to route flow over depressions
print ('Libraries loaded sucessfully!')
quit
#Block 1: Installing LandLab (Only needs to be run once)
# Installs LandLab
py_install(landlab)
#Block 1: Installing LandLab (Only needs to be run once)
# Installs LandLab
py_install("landlab")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
# install.packages("tinytex")
# install_tinytex()
library(tinytex)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rlang)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
# install.packages("tinytex")
# install_tinytex()
install.packages("spelling")
library(spelling)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
library(tinytex)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rlang)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
library(spelling)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
# install.packages("tinytex")
# install_tinytex()
# install.packages("spelling")
library(tinytex)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rlang)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
library(spelling)
knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
library(tinytex)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rlang)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# diffusion w/ depth function plotting, not needed
eq = function(z){0.005334 * exp(-z/0.28)}
ggplot(data.frame(z = c(0, 3)), aes(x = z)) +
stat_function(fun = eq) +
scale_y_reverse(name = "diffusion (m2/yr)") +
scale_x_reverse(name = "depth (m)") +
coord_flip() +
ggtitle("Decline in diffusion with depth"
, subtitle = "s = 0.005334 (Darwin 1881); b = 0.28 (Johnson et al. 2014)")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
library(tinytex)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rlang)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# diffusion w/ depth function plotting
eq = function(z){0.005334 * exp(-z/0.28)}
ggplot(data.frame(z = c(0, 3)), aes(x = z)) +
stat_function(fun = eq) +
scale_y_reverse(name = "diffusion (m2/yr)") +
scale_x_reverse(name = "depth (m)") +
coord_flip() +
ggtitle("Decline in diffusion with depth"
, subtitle = "s = 0.005334 (Darwin 1881); b = 0.28 (Johnson et al. 2014)")
#'###################### [creating a data frame below] #######################
# number of time steps
rep_times = 1000
# number of years per time step
rep_years = 10
# build a data frame
df = data.frame(time_step = rep(c(0:(rep_times - 1)), each = 4),
index = rep(c("z", "h", "clay", "stones"), times = rep_times),
"A" = 0,
"B" = 0,
"C" = 0,
"D" = 0,
"E" = 0,
"F" = 0)
#split data frame into multiple based on index column. names accordingly
df2 = df %>% group_by(index) %>% group_split(.keep = FALSE) %>% set_names(nm = c("z", "h", "clay", "stones"))
#assign the top depths of each layer
za = c(rep(0, times = rep_times))
zb = c(rep(0.25, times = rep_times))
zc = c(rep(0.5, times = rep_times))
zd = c(rep(1, times = rep_times))
ze = c(rep(1.5, times = rep_times))
# zf_fun bottom depth, not a layer (this is needed, as zf is is what the D functions use to assess if zi + hi = 0)
zf_fun = 1.75
zf = c(rep(zf_fun, times = rep_times))
#calculate h's, layer thickness
ha = zb - za
hb = zc - zb
hc = zd - zc
hd = ze - zd
he = zf - ze
#input parameters into data frames
df2[["z"]][c(2, 3, 4, 5, 6)] = data.frame(za, zb, zc, zd, ze)
df2[["h"]][c(2, 3, 4, 5, 6)] = data.frame(ha, hb, hc, hd, he)
#below is the starting clay and stone content of each layer, A:E
df2[["clay"]][c(2, 3, 4, 5, 6)] = data.frame(40, 1, 1, 1, 1)
df2[["stones"]][c(2, 3, 4, 5, 6)] = data.frame(5, 5, 5, 5, 5)
#'###################### [model calculations below] #######################
# define diffusion (bioturbation) function (if statements needed for top and bottom layers) (m/yr)
Dz <- function(z) {
if(z == 0) {
0 # could an erosion factor be included here ??????
} else {
if(z == zf_fun) {
0 # could a soil production factor be included here ??????
} else {
#' [diffusion function defined here]
#9.81 * 10^-5 * exp(-z/0.28) #linear (Johnson et al., 2014)
0.005334 * exp(-z/0.28) #exponential (Johnson et al., 2014) for eq. (Darwin 1881) for intercept
#6.9 * 10^-5 + -1.06 * 10^-4 * z #exponential (Johnson et al., 2014)
#0.0426 #earthworms (Yeates et a.l, 1995)
#0.005334 #earthworms (Darwin 1881)
}
}
}
#' define function that calculates net [clay-diffusion] (g/m/yr) into/out of ith layer
clay_diff_fun <- function(Ch, Ci, Cj, zi, hi) {
(Dz(z = zi) * (Ch - Ci) +
(Dz(z = zi + hi) * (Cj - Ci)) )
}
#' define function that calculates net [stones-diffusion] (g/m/yr) into/out of ith layer
stones_diff_fun <- function(Sh, Si, Sj, zi, hi) {
(Dz(z = zi) * Sh -
(Dz(z = zi + hi) * Si) )
}
# for loop that fills data frame with diffusion-calculated clay contents
for(crow in 2:(rep_times)) {
for(ccol in 2:6) {
# apply clay-diffusion function
df2[["clay"]][crow, ccol] =
df2[["clay"]][crow - 1, ccol] +
rep_years *
clay_diff_fun(df2[["clay"]][crow - 1, ccol - 1],
df2[["clay"]][crow - 1, ccol],
df2[["clay"]][crow - 1, ccol + 1],
df2[["z"]][crow, ccol],
df2[["h"]][crow, ccol])
# apply stones-diffusion function
df2[["stones"]][crow, ccol] =
df2[["stones"]][crow - 1, ccol] +
rep_years *
stones_diff_fun(df2[["stones"]][crow - 1, ccol - 1],
df2[["stones"]][crow - 1, ccol],
df2[["stones"]][crow - 1, ccol + 1],
df2[["z"]][crow, ccol],
df2[["h"]][crow, ccol])
}
}
#'###################### [plotting below] #######################
#' [creating a dataframe to plot from]
# convert df2 dataframes to long format, one data frame for each clay, stones, and z
df2_clay_long <- df2[["clay"]] %>%
pivot_longer(cols = c("A", "B", "C", "D", "E"), names_to = "layer") %>%
mutate(F = c(1:(5*rep_times)), .keep = "unused")
df2_stones_long <- df2[["stones"]] %>%
pivot_longer(cols = c("A", "B", "C", "D", "E"), names_to = "layer") %>%
mutate(F = c(1:(5*rep_times)), .keep = "unused")
# combine long df2 dataframes into one for plotting
df2_z_long <- df2[["z"]] %>%
pivot_longer(cols = c("A", "B", "C", "D", "E"), names_to = "layer") %>%
mutate(F = c(1:(5*rep_times)), .keep = "unused")
# combine and filter the long df2's and select for only key time steps
df2_long_join1 <- left_join(df2_clay_long, df2_z_long, suffix = c(".clay", ".z"), by = "F")
df2_long_join2 <- left_join(df2_long_join1, df2_stones_long, by = "F")
df2_long <- df2_long_join2 %>%
select(time_step.clay, layer.clay, value.clay, value.z, value) %>%
rename(time_step = time_step.clay, layer = layer.clay, value.stones = value) %>%
filter(time_step == 0 |
time_step == (rep_times / 100) |
time_step == (rep_times / 50) |
time_step == (rep_times / 10) |
time_step == (rep_times / 4) |
time_step == (rep_times - 1))
#plot stones
ggplot(data = df2_long, mapping = aes(y = value.z,
x = value.stones,
group = time_step)) +
geom_line(orientation = "y") +
scale_y_reverse(name = "depth (m)") +
scale_x_continuous(name = "stones content (g/m2)") +
facet_wrap(~time_step) +
ggtitle("Stone movement over time"
, subtitle = "1 timestep = 10 years")
#plot clay
ggplot(data = df2_long, mapping = aes(y = value.z,
x = value.clay,
group = time_step)) +
geom_line(orientation = "y") +
scale_y_reverse(name = "depth (m)") +
scale_x_continuous(name = "clay content (g/m2)") +
facet_wrap(~time_step) +
ggtitle("Clay movement over time",
subtitle = "1 timestep = 10 years")
#' [basic plot, stone content over time for each layer]
ggplot(data = df2[["stones"]]) +
geom_line(mapping = aes(y = A, x = time_step, color = "green")) +
geom_line(mapping = aes(y = B, x = time_step, color = "red")) +
geom_line(mapping = aes(y = C, x = time_step, color = "blue")) +
geom_line(mapping = aes(y = D, x = time_step, color = "orange")) +
geom_line(mapping = aes(y = E, x = time_step, color = "purple"))
# diffusion w/ depth function plotting
eq = function(z){0.005334 * exp(-z/0.28)}
eq2 = function(z){0.005334 * exp(-z/0.1)}
ggplot(data.frame(z = c(0, 3)), aes(x = z)) +
stat_function(fun = eq2)
stat_function(fun = eq) +
scale_y_reverse(name = "diffusion (m2/yr)") +
scale_x_reverse(name = "depth (m)") +
coord_flip() +
ggtitle("Decline in diffusion with depth"
, subtitle = "s = 0.005334 (Darwin 1881); b = 0.28 (Johnson et al. 2014)")
# diffusion w/ depth function plotting
eq = function(z){0.005334 * exp(-z/0.28)}
eq2 = function(z){0.005334 * exp(-z/0.1)}
ggplot(data.frame(z = c(0, 3)), aes(x = z)) +
stat_function(fun = eq, fun = eq2) +
scale_y_reverse(name = "diffusion (m2/yr)") +
scale_x_reverse(name = "depth (m)") +
coord_flip() +
ggtitle("Decline in diffusion with depth"
, subtitle = "s = 0.005334 (Darwin 1881); b = 0.28 (Johnson et al. 2014)")
# diffusion w/ depth function plotting
eq = function(z){0.005334 * exp(-z/0.28)}
eq2 = function(z){0.005334 * exp(-z/0.1)}
ggplot(data.frame(z = c(0, 3)), aes(x = z)) +
stat_function(fun = eq) +
scale_y_reverse(name = "diffusion (m2/yr)") +
scale_x_reverse(name = "depth (m)") +
coord_flip() +
ggtitle("Decline in diffusion with depth"
, subtitle = "s = 0.005334 (Darwin 1881); b = 0.28 (Johnson et al. 2014)")
\begin{align*}
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rlang)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
library(spelling)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
library(usethis)
library(bookdown)
library(knitr)
library(rmarkdown)
# the function used to compile the book, run before commiting
render_book("index.Rmd", output_format = "bookdown::gitbook", output_dir = "docs",  new_session = TRUE)
print("done")
